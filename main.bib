%%%% REFERÊNCIAS
%%
%% Conjunto padronizado de elementos descritivos retirados de um documento, que permite sua identificação individual.
%%
%% Cada entrada no arquivo BibTeX segue um formato padrão. Este formato muda ligeiramente baseado no tipo de entrada, mas a sintaxe
%% continua a mesma.
%%
%% O rótulo de cada entrada não pode conter caracteres especiais, acentuados ou cedilha.
%%
%% A formatação do texto no campo "AUTHOR" deve obedecer algumas regras:
%%   - Acento agudo:        "á = {\'a}".
%%   - Acento crase:        "à = {\`a}".
%%   - Acento til:          "ã = {\~a}".
%%   - Acento circunflexo:  "ê = {\^e}".
%%   - Acento trema:        "ü = {\"u}".
%%   - Acento na letra i:   "í = {\'\i}".
%%   - Cedilha:             "ç = {\c{c}}".
%%   - Sobrenome composto:  "Santos, Filho, Jos{\'e} C. S.; da Silva, Erivanildo Lopes".
%%   - Nome de organização: "{\mbox IONA Technologies PLC}".
%%
%% A formatação do texto no campo "TITLE" deve obedecer algumas regras (também válidas para o texto no campo "AUTHOR"):
%%   - MAIÚSCULAS: "REAL = {REAL}".
%%   - Minúsculas: "real = {real}".
%%   - CamelCase:  "Real = {R}eal".

%% TIPOS DE ENTRADA
%%
%% Ao inserir uma referência no banco de dados, a primeira coisa a decidir é o tipo de entrada. Existem vários tipos de entrada, mas
%% não são completas, porém são suficientes para o BibTeX fornecer entradas para lidar com praticamente qualquer tipo de referência
%% razoavelmente bem.

%% ARTICLE - Um artigo de um jornal ou revista.
%%   - Campos requeridos: AUTHOR, TITLE, JOURNAL e YEAR.
%%   - Campos opcionais: VOLUME, NUMBER, PAGES, MONTH e NOTE.

%% BOOK - Um livro com uma editora explícita.
%%   - Campos requeridos: AUTHOR ou EDITOR, TITLE, PUBLISHER e YEAR.
%%   - Campos opcionais: VOLUME ou NUMBER, SERIES, ADDRESS, EDITION, MONTH e NOTE.

%% BOOKLET - Uma obra impressa mas sem uma editora ou instituição patrocinadora.
%%   - Campos requeridos: TITLE.
%%   - Campos opcionais: AUTHOR, HOWPUBLISHED, ADDRESS, MONTH, YEAR e NOTE.

%% CONFERENCE - O mesmo que "INPROCEEDINGS", incluído para compatibilidade de escrita.
%%   - Campos requeridos: AUTHOR, TITLE, BOOKTITLE e YEAR.
%%   - Campos opcionais: EDITOR, VOLUME ou NUMBER, SERIES, PAGES, ADDRESS, MONTH, ORGANIZATION, PUBLISHER e NOTE.

%% INBOOK - Uma parte de um livro, que pode ser um capítulo e/ou um intervalo de páginas.
%%   - Campos requeridos: AUTHOR ou EDITOR, TITLE, CHAPTER ou PAGES, PUBLISHER e YEAR.
%%   - Campos opcionais: VOLUME ou NUMBER, SERIES, TYPE, ADDRESS, EDITION, MONTH, NOTE.

%% INCOLLECTION - Uma parte de um livro com o seu próprio título.
%%   - Campos requeridos: AUTHOR, TITLE, BOOKTITLE, PUBLISHER e YEAR.
%%   - Campos opcionais: EDITOR, VOLUME OR NUMBER, SERIES, TYPE, CHAPTER, PAGES, ADDRESS, EDITION, MONTH e NOTE.

%% INPROCEEDINGS - Um artigo nos anais de uma conferência.
%%   - Campos requeridos: AUTHOR, TITLE, BOOKTITLE e YEAR.
%%   - Campos opcionais: EDITOR, VOLUME ou NUMBER, SERIES, PAGES, ADDRESS, MONTH, ORGANIZATION, PUBLISHER e NOTE.

%% MANUAL - Uma documentação técnica.
%%   - Campos requeridos: TITLE.
%%   - Campos opcionais: AUTHOR, ORGANIZATION, ADDRESS, EDITION, MONTH, YEAR e NOTE.

%% MASTERSTHESIS - Uma dissertação de mestrado.
%%   - Campos requeridos: AUTHOR, TITLE, SCHOOL e YEAR.
%%   - Campos opcionais: TYPE, ADDRESS, MONTH e NOTE.

%% PHDTHESIS - Uma tese de doutorado.
%%   - Campos requeridos: AUTHOR, TITLE, SCHOOL e YEAR.
%%   - Campos opcionais: TYPE, ADDRESS, MONTH e NOTE.

%% PROCEEDINGS - As deliberações de uma conferência.
%%   - Campos requeridos: TITLE e YEAR.
%%   - Campos opcionais: EDITOR, VOLUME ou NUMBER, SERIES, ADDRESS, MONTH, ORGANIZATION, PUBLISHER e NOTE.

%% TECHREPORT - Um relatório publicado por uma escola ou uma outra instituição, geralmente dentro de uma série numerada.
%%   - Campos requeridos: AUTHOR, TITLE, INSTITUTION e YEAR.
%%   - Campos opcionais: TYPE, NUMBER, ADDRESS, MONTH e NOTE.

%% UNPUBLISHED - Um documento com um autor e um título, mas não publicado formalmente.
%%   - Campos requeridos: AUTHOR, TITLE e NOTE.
%%   - Campos opcionais: MONTH e YEAR.

%% MISC - Use esse tipo quando nada mais se encaixa.
%%   - Campos requeridos: "NENHUM".
%%   - Campos opcionais: AUTHOR, TITLE, HOWPUBLISHED, MONTH, YEAR e NOTE.

%% CAMPOS
%%
%% Os tipos de entradas bibliográficas contém alguns subconjuntos padrões de entradas de dados:
%%   - ADDRESS: Endereço da editora (normalmente, apenas a cidade, mas pode ser o endereço completo para editoras menos conhecidas).
%%   - ANNOTE: Uma anotação para estilos bibliográficos adotados (não típico).
%%   - AUTHOR: O(s) nome(s) do(s) autor(es) (no caso de haver mais de um autor, separá-los por "and").
%%   - BOOKTITLE: O título do livro, mesmo que apenas parte dele esteja sendo citado.
%%   - CHAPTER: O número do capítulo.
%%   - CROSSREF: A chave de entrada da referência cruzada.
%%   - EDITION: A edição de um livro, forma longa (como o "primeiro" ou "segundo").
%%   - EDITOR: O(s) nome(s) do(s) editor(es).
%%   - EPRINT: A especificação de uma publicação eletrônica, muitas vezes um "preprint" ou um relatório técnico.
%%   - HOWPUBLISHED: Como ele foi publicado, se o método de publicação não é típico.
%%   - INSTITUTION: A instituição que esteve envolvida na publicação, mas não é necessariamente a editora.
%%   - JOURNAL: O jornal ou a revista onde o trabalho foi publicado.
%%   - KEY: Um campo oculto utilizado para especificar ou colocar em ordem alfabética as entradas (quando o campos "autor" e
%%     "editor" estão em falta). Note que isto é muito diferente da chave (mencionados apenas após esta lista) que é usado para
%%     citar ou fazer uma referência cruzada à entrada.
%%   - MONTH: O mês de publicação (ou, se não publicado, no mês de criação).
%%   - NOTE: Diversas informações extras.
%%   - NUMBER: O "número" de um jornal, uma revista, ou um relatório técnico, se aplicável. (A maioria das publicações tem um campo
%%     "volume", mas não o campo "número").
%%   - ORGANIZATION: A organização patrocinadora.
%%   - PAGES: números de página, separados por vírgulas ou hifens duplo. Para os livros, o número total de páginas.
%%   - PUBLISHER: O nome da editora.
%%   - SCHOOL: A escola onde a tese ou dissertação foi escrita.
%%   - SERIES: A série de livros onde foi publicado em (por exemplo: "A Hardy Boys" ou "Lecture Notes in Computer Science").
%%   - TITLE: o título do trabalho.
%%   - TYPE: O tipo de relatório técnico, por exemplo, "Nota de Investigação".
%%   - URL: O endereço da web.
%%   - VOLUME: O volume de uma revista ou de um livro com vários volumes.
%%   - YEAR: O ano de publicação (ou, se não publicado, o ano de criação).
%%
%% Além disto, cada entrada contém uma chave (rótulo) que é usada para citar ou uma entrada de referência cruzada. Esta chave é o
%% primeiro item em uma entrada BibTeX, e não faz parte de qualquer domínio.

@proceedings{SymposiumPrinciplesOfDistributedComputingCAPTheorem2000,
  title = {PODC '00: Proceedings of the Nineteenth Annual ACM Symposium on Principles of Distributed Computing},
  year = {2000},
  isbn = {1581131836},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  location = {Portland, Oregon, USA}
}

@Inbook{BrewerCAPTheoremSimonSalome,
  author="Salom{\'e}, Simon",
  title="Brewer’s CAP Theorem",
  year="2012",
  url="https://edisciplinas.usp.br/pluginfile.php/2541318/mod_resource/content/1/TeoremaDeBrewer.pdf"
}

@ARTICLE{TwentyYearsLaterEricBrewer2012,
  author={Brewer, Eric},
  journal={Computer}, 
  title={CAP twelve years later: How the "rules" have changed}, 
  year={2012},
  volume={45},
  number={2},
  pages={23-29},
  abstract={The CAP theorem asserts that any networked shared-data system can have only two of three desirable properties. However, by explicitly handling partitions, designers can optimize consistency and availability, thereby achieving some trade-off of all three. The featured Web extra is a podcast from Software Engineering Radio, in which the host interviews Dwight Merriman about the emerging NoSQL movement, the three types of nonrelational data stores, Brewer's CAP theorem, and much more.},
  keywords={},
  doi={10.1109/MC.2012.37},
  ISSN={1558-0814},
  month={Feb},
}

@ARTICLE{PerspectivesCAPTheoremGilbertLynch2012,
  author={Gilbert, Seth and Lynch, Nancy},
  journal={Computer}, 
  title={Perspectives on the CAP Theorem}, 
  year={2012},
  volume={45},
  number={2},
  pages={30-36},
  doi={10.1109/MC.2011.389}
}

@article{Brewer'sConjectureAndTheFeasibilityOfConsistentAvailablePartition-TolerantWebServicesGilbertLynch2002,
  author = {Gilbert, Seth and Lynch, Nancy},
  year = {2002},
  month = {11},
  pages = {},
  title = {Brewer's Conjecture and the Feasibility of Consistent Available Partition-Tolerant Web Services},
  volume = {33},
  journal = {ACM SIGACT News},
  doi = {10.1145/564585.564601}
}

@misc{YouCantSacrificePartitionToleranceCodaHale2010,
  title = "You Can't Sacrifice Partition Tolerance",
  author = "Coda Hale",
  year = "2010",
  howpublished = "Blog post",
  url = "https://codahale.com/you-cant-sacrifice-partition-tolerance/"
}

@ARTICLE{PACELCTheoremDanielAbadi2012,
  author={Abadi, Daniel},
  journal={Computer}, 
  title={Consistency Tradeoffs in Modern Distributed Database System Design: CAP is Only Part of the Story}, 
  year={2012},
  volume={45},
  number={2},
  pages={37-42},
  doi={10.1109/MC.2012.33}
}

@misc{ProblemsWithCAPMichaelStonebraker2010,
  title = "Problems with CAP and Yahoo's little known NoSQL system",
  author = "Stonebraker, Michael",
  year = "2010",
  howpublished = "Blog post",
  url = "http://dbmsmusings.blogspot.com/2010/04/problems-with-cap-and-yahoos-little.html"
}

@article{EventuallyConsistentWernerVogels2009,
  author = {Vogels, Werner},
  title = {Eventually Consistent},
  year = {2009},
  issue_date = {January 2009},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {52},
  number = {1},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/1435417.1435432},
  doi = {10.1145/1435417.1435432},
  abstract = {Building reliable distributed systems at a worldwide scale demands trade-offs between consistency and availability.},
  journal = {Commun. ACM},
  month = {jan},
  pages = {40–44},
  numpages = {5}
}

@misc{ConsistencyInACIDAndCAPTheoremStackOverFlow2013,
  title = "Consistency in ACID and CAP Theorem: Are they the same?",
  author = "Stack Overflow",
  year = "2013",
  howpublished = "Stack Exchange post",
  url = "https://dba.stackexchange.com/questions/31260/consistency-in-acid-and-cap-theorem-are-they-the-same"
}

@article{PaxosMadeSimpleLamport2001,
  author = {Lamport, Leslie},
  title = {Paxos Made Simple},
  year = {2001},
  month = {December},
  abstract = {At the PODC 2001 conference, I got tired of everyone saying how difficult it was to understand the Paxos algorithm, published in [122]. Although people got so hung up in the pseudo-Greek names that they found the paper hard to understand, the algorithm itself is very simple. So, I cornered a couple of people at the conference and explained the algorithm to them orally, with no paper. When I got home, I wrote down the explanation as a short note, which I later revised based on comments from Fred Schneider and Butler Lampson. The current version is 13 pages long, and contains no formula more complicated than n1 > n2.},
  url = {https://www.microsoft.com/en-us/research/publication/paxos-made-simple/},
  pages = {51-58},
  journal = {ACM SIGACT News (Distributed Computing Column) 32, 4 (Whole Number 121, December 2001)},
  edition = {ACM SIGACT News (Distributed Computing Column) 32, 4 (Whole Number 121, December 2001)},
}

@book{DistributedSystemsCoulouris,
  author = {Coulouris, George and Dollimore, Jean and Kindberg, Tim and Blair, Gordon},
  title = {Distributed Systems: Concepts and Design},
  year = {2011},
  isbn = {0132143011},
  publisher = {Addison-Wesley Publishing Company},
  address = {USA},
  edition = {5th},
  abstract = {Broad and up-to-date coverage of the principles and practice in the fast moving area of Distributed Systems. Distributed Systems provides students of computer science and engineering with the skills they will need to design and maintain software for distributed applications. It will also be invaluable to software engineers and systems designers wishing to understand new and future developments in the field. From mobile phones to the Internet, our lives depend increasingly on distributed systems linking computers and other devices together in a seamless and transparent way. The fifth edition of this best-selling text continues to provide a comprehensive source of material on the principles and practice of distributed computer systems and the exciting new developments based on them, using a wealth of modern case studies to illustrate their design and development. The depth of coverage will enable readers to evaluate existing distributed systems and design new ones.}
}

@Article{TanenbaumDistributedSystemsThirdEdition,
  author={van Steen, Maarten
  and Tanenbaum, Andrew S.},
  title={A brief introduction to distributed systems},
  journal={Computing},
  year={2016},
  month={Oct},
  day={01},
  volume={98},
  number={10},
  pages={967-1009},
  abstract={Distributed systems are by now commonplace, yet remain an often difficult area of research. This is partly explained by the many facets of such systems and the inherent difficulty to isolate these facets from each other. In this paper we provide a brief overview of distributed systems: what they are, their general design goals, and some of the most common types.},
  issn={1436-5057},
  doi={10.1007/s00607-016-0508-7},
  url={https://doi.org/10.1007/s00607-016-0508-7}
}

@INPROCEEDINGS{DistFax,
  author={Fu, Xiaoqin and Lin, Boxiang and Cai, Haipeng},
  booktitle={2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)}, 
  title={DistFax: A Toolkit for Measuring Interprocess Communications and Quality of Distributed Systems}, 
  year={2022},
  volume={},
  number={},
  pages={51-55},
  doi={10.1145/3510454.3516859}
}

@ARTICLE{MetricsSuite,
  author={Chidamber, S.R. and Kemerer, C.F.},
  journal={IEEE Transactions on Software Engineering}, 
  title={A metrics suite for object oriented design}, 
  year={1994},
  volume={20},
  number={6},
  pages={476-493},
  doi={10.1109/32.295895}
}

@INPROCEEDINGS{OverviewOfObject-orientedDesignMetrics,
  author={Harrison, R. and Counsell, S. and Nithi, R.},
  booktitle={Proceedings Eighth IEEE International Workshop on Software Technology and Engineering Practice incorporating Computer Aided Software Engineering}, 
  title={An overview of object-oriented design metrics}, 
  year={1997},
  volume={},
  number={},
  pages={230-235},
  doi={10.1109/STEP.1997.615494}
}

@inproceedings{HaveWeReachedConsensus,
  author = {Abad, Cristina L. and Ortiz-Holguin, Eduardo and Boza, Edwin F.},
  title = {Have We Reached Consensus? An Analysis of Distributed Systems Syllabi},
  year = {2021},
  isbn = {9781450380621},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3408877.3432409},
  doi = {10.1145/3408877.3432409},
  abstract = {Correctly applying distributed systems concepts is important for software that seeks to be scalable, reliable and fast. For this reason, Distributed Systems is a course included in many Computer Science programs. To both describe current trends in teaching distributed systems and as a reference for educators that seek to improve the quality of their syllabi, we present a review of 51 syllabi of distributed systems courses from top Computer Science programs around the world. We manually curated the syllabi and extracted data that allowed us to identify approaches used in teaching this subject, including choice of topics, book, and paper reading list. We present our results and a discussion on whether what is being taught matches the guidelines of two important curriculum initiatives.},
  booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
  pages = {1082–1088},
  numpages = {7},
  keywords = {course topics, distributed systems, syllabi, curricula},
  location = {Virtual Event, USA},
  series = {SIGCSE '21}
}

@book{Pressman2009,
  title={Engenharia de Software - 7.ed.},
  author={Pressman, Roger S.},
  pages = {107},
  isbn={9788580550443},
  url={https://books.google.com.br/books?id=y0rH9wuXe68C},
  year={2009},
  publisher={McGraw Hill Brasil},
  URLACCESSDATE = {21 ago. 2013}
}

@article{tomasulo:algorithm:5392028,
  author = {Tomasulo, R. M.},
  title = {An Efficient Algorithm for Exploiting Multiple Arithmetic Units},
  journal = {IBM Journal of Research and Development},
  year = {1967},
  month = {Jan},
  number = {1},
  pages = {25-33},
  volume = {11},
  doi = {10.1147/rd.111.0025},
  ISSN = {0018-8646}
}

@article{Cruz2003,
  author = {Cruz, Renato},
  title = {Padrão Brasileiro de {TV} Enfrenta Oposição},
  journal = {O Estado de São Paulo},
  ADDRESS  = {São Paulo},
  year = {2003},
  month = {fev},
  day = {2}
}

@misc{Moore:2000:CMC:333067.333074,
  author = {Moore, Gordon E.},
  title = {Readings in Computer Architecture},
  year = {2000},
  url = {http://dl.acm.org/citation.cfm?id=333067.333074},
  URLACCESSDATE = {21 ago. 2013}
}

@INPROCEEDINGS{OSSProjects-TheProfessors'Perspective,
  author={Pinto, Gustavo Henrique Lima and Filho, Fernando Figueira and Steinmacher, Igor and Gerosa, Marco Aurelio},
  booktitle={2017 IEEE 30th Conference on Software Engineering Education and Training}, 
  title={Training Software Engineers Using Open-Source Software: The Professors' Perspective}, 
  year={2017},
  volume={},
  number={},
  pages={117-121},
  doi={10.1109/CSEET.2017.27},
}

@InProceedings{Simone.Tonhao-etal:2022,
  author           = {Simone Tonh{\~a}o and Williamson Silva and Thelma Colanzi and Igor Steinmacher},
  crossref         = {proceedings:sbsc:2022},
  doi              = {10.5753/sbsc_estendido.2022.19331},
  pages            = {33--38},
  title            = {Uma plataforma gamificada de desafios baseados em worked examples extraídos de projetos de Software Livre para o ensino de Engenharia de Software},
  abstract         = {Encontrar exemplos reais e que acompanhem a evolução da Engenharia de Software (ES) não é uma tarefa fácil para os professores da área. Os projetos de Software Livre (SL) têm sido uma alternativa no apoio ao ensino de ES, visto que, podem proporcionar contato com ambientes reais e são potenciais fontes para extração de worked examples. Além disso, a pandemia do COVID-19 trouxe um novo desafio: como manter os estudantes engajados no modo de ensino remoto. Esse desafio poderá perdurar além da pandemia, uma vez que o ensino híbrido é uma aposta para o período pós-pandemia. Diante disso, o objetivo deste trabalho é apoiar docentes e discentes no processo de ensino e aprendizagem, em momentos assíncronos das disciplinas de ES, por meio da proposição, avaliação e evolução de uma plataforma gamificada de desafios baseados em worked examples reais extraídos de projetos de Software Livre. Para alcançar esse propósito será guiada pela abordagem de pesquisa Design Science Research (DSR). Como resultado, pretende-se obter uma plataforma gamificada de desafios, e por meio dela investigar os impactos da adoção de worked examples extraídos de projetos de SL em ambientes assíncronos, e compreender como a gamificação de tais exemplos pode influenciar em aspectos motivacionais e de engajamento dos estudantes.},
  creationdate     = {2022-05-17T19:33:51},
  modificationdate = {2022-05-17T19:35:06},
}

@InProceedings{Simone.Tonhao-etal:2021,
  author           = {Tonh{\~a}o, Simone and Colanzi, Thelma and Steinmacher, Igor},
  crossref         = {proceedings:sbes:2021},
  doi              = {10.1145/3474624.3476970},
  pages            = {133--142},
  title            = {Using Real Worked Examples to Aid Software Engineering Teaching},
  abstract         = {Worked examples are instructional devices composed of the description of a problem, steps to solve the problem, and the final result. There is evidence that the use of the worked examples improves the learning process by reducing the learning time, reducing the cognitive load, and facilitating the construction of cognitive schemes. In addition, students who learn from worked examples tend to solve similar problems more quickly and easily. Worked examples are adopted in several areas of knowledge but are not well-explored in Software Engineering (SE) teaching. Thus, the goal of this work was to explore the use of worked examples in SE courses. To do so, we conducted an exploratory study split into two stages. In the first stage, we administered a survey with SE instructors to investigate the use of common examples, worked examples, and the difficulties find this type of material. In the second stage, we applied worked examples in the classroom and collected feedback from students. The second stage was carried out remotely due to the conditions imposed by COVID-19. The results showed that instructors are employing examples in their courses; some of them use worked examples, even when they do not know the definition. In addition, the feedback from the students was positive, which may encourage the use of worked examples in SE teaching.},
  creationdate     = {2021-11-11T22:35:59},
  keywords         = {Real Examples, Worked Examples, Exploratory study, Software Engineering Education},
  modificationdate = {2023-11-06T17:19:35},
}

@InProceedings{Tiago.Bonetti-etal:2023,
  author           = {Bonetti, Tiago Piperno and Dias, Matheus Molina and Silva, Williamson and Colanzi, Thelma Elita},
  crossref         = {proceedings:sbes:2023},
  doi              = {10.1145/3613372.3614195},
  pages            = {67--76},
  title            = {Students' Perception of Example-Based Learning in Software Modeling Education},
  abstract         = {Teaching software modeling is challenging because it involves understanding and applying complex theoretical concepts to design structural models. In this sense, empowering students with the knowledge and skills necessary for the software industry is a challenge, intensified by the majority adoption of traditional (expositive) lectures, where students are passive subjects in the learning process. Adopting methodologies where the student plays an active role during learning is necessary to deal with this challenge. Example-Based Learning (EBL) is an active teaching methodology that satisfies such a condition. It uses worked examples to demonstrate how to perform a given task or acquire a given skill. In this context, this work aims to investigate, from the student’s perspective, how EBL can contribute (or not) to learning class diagram modeling. To do so, an exploratory study was carried out in which instructors used a support portal whose objective was to guide them in applying EBL in their classes. The study was conducted with 40 volunteer students from three different Informatics and Computer Science classes at a Brazilian university. The results showed that students had a positive perception of EBL, reporting that it facilitated the understanding of theoretical concepts, improved the connection between theory and practice, helped to deal with errors, and promoted essential skills for software development. These results corroborate that EBL is an efficient approach to the software modeling learning process, which can contribute to encouraging instructors to adopt this type of methodology in teaching Software Modeling.},
  creationdate     = {2023-11-06T17:21:39},
  keywords         = {Example-Based Learning, Software Engineering Education., Teaching Software Modeling, Active Learning Strategies},
  modificationdate = {2023-11-06T17:22:24},
}

@Article{Robert.Atkinson-etal:2000,
  author           = {Robert K. Atkinson and Sharon J. Derry and Alexander Renkl and Donald Wortham},
  crossref         = {journal:sage:rer},
  doi              = {10.3102/00346543070002181},
  month            = jun,
  number           = {2},
  pages            = {181--214},
  title            = {Learning from Examples: Instructional Principles from the Worked Examples Research},
  volume           = {70},
  year             = {2000},
  abstract         = {Worked examples are instructional devices that provide an expert's problem solution for a learner to study. Worked-examples research is a cognitive-experimental program that has relevance to classroom instruction and the broader educational research community. A frame-work for organizing the findings of this research is proposed, leading to instructional design principles. For instance, one instructional design principle suggests that effective examples have highly integrated components. They employ multiple modalities in presentation and emphasize conceptual structure by labeling or segmenting. At the lesson level, effective instruction employs multiple examples for each conceptual problem type, varies example formats within problem type, and employs surface features to signal deep structure. Also, examples should be presented in close proximity to matched practice problems. More- over, learners can be encouraged through direct training or by the structure of the worked example to actively self:explain examples. Worked examples are associated with early stages of skill development, but the design principles are relevant to constructivist research and teaching.},
  modificationdate = {2023-11-06T17:27:13},
}

@InProceedings{Skudder-LuxtonReilly:2014,
  author           = {Skudder, Ben and Luxton-Reilly, Andrew},
  crossref         = {proceedings:ace:2014},
  pages            = {59--64},
  title            = {Worked Examples in Computer Science},
  abstract         = {Most instructors teaching Computer Science use examples to help students learn, and many instructors use worked examples (either in a static or a dynamic style) in their courses. However, the research on worked examples is not well known in the Computer Science Education community. This paper provides an overview of how worked examples have been studied, and the major findings from the literature, particularly as they relate to Computer Science.},
  keywords         = {cognition, cognitive load theory, learning, worked examples},
  modificationdate = {2023-11-06T17:26:47},
}

@manual{aniche-ck,
  title={Java code metrics calculator (CK)},
  author={Maurício Aniche},
  year={2015},
  note={Available in https://github.com/mauricioaniche/ck/}
}

@inproceedings{Tsantalis:ICSE:2018:RefactoringMiner,
  author = {Tsantalis, Nikolaos and Mansouri, Matin and Eshkevari, Laleh M. and Mazinanian, Davood and Dig, Danny},
  title = {Accurate and Efficient Refactoring Detection in Commit History},
  booktitle = {Proceedings of the 40th International Conference on Software Engineering},
  series = {ICSE '18},
  year = {2018},
  isbn = {978-1-4503-5638-1},
  location = {Gothenburg, Sweden},
  pages = {483--494},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/3180155.3180206},
  doi = {10.1145/3180155.3180206},
  acmid = {3180206},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {Git, Oracle, abstract syntax tree, accuracy, commit, refactoring},
}

@inproceedings{PyDrillerSpadini2018,
  address = {New York, New York, USA},
  author = {Spadini, Davide and Aniche, Maur\'{i}cio and Bacchelli, Alberto},
  booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering - ESEC/FSE 2018},
  doi = {10.1145/3236024.3264598},
  isbn = {9781450355735},
  keywords = {2018,acm reference format,and alberto bacchelli,davide spadini,git,gitpython,maur\'{i}cio aniche,mining software repositories,pydriller,python},
  pages = {908--911},
  publisher = {ACM Press},
  title = {{PyDriller: Python framework for mining software repositories}},
  url = {http://dl.acm.org/citation.cfm?doid=3236024.3264598},
  year = {2018}
}

@article{ApacheKafkaNextGenerationDistributedMessagingSystem:2010,
  author = {Jay Kreps, Neha Narkhede, Jun Rao},
  title = {Apache Kafka: Next Generation Distributed Messaging System},
  journal = {International Journal of Scientific and Engineering Research},
  year = {2010},
  volume = {3},
  number = {8},
  pages = {1-4},
  url = {https://ijsetr.com/uploads/436215IJSETR3636-621.pdf}
}

@inproceedings{ZooKeeperWaitFree:2010,
  author = {Hunt, Patrick and Konar, Mahadev and Junqueira, Flavio P. and Reed, Benjamin},
  title = {ZooKeeper: Wait-Free Coordination for Internet-Scale Systems},
  year = {2010},
  publisher = {USENIX Association},
  address = {USA},
  abstract = {In this paper, we describe ZooKeeper, a service for coordinating processes of distributed applications. Since ZooKeeper is part of critical infrastructure, ZooKeeper aims to provide a simple and high performance kernel for building more complex coordination primitives at the client. It incorporates elements from group messaging, shared registers, and distributed lock services in a replicated, centralized service. The interface exposed by Zoo-Keeper has the wait-free aspects of shared registers with an event-driven mechanism similar to cache invalidations of distributed file systems to provide a simple, yet powerful coordination service.The ZooKeeper interface enables a high-performance service implementation. In addition to the wait-free property, ZooKeeper provides a per client guarantee of FIFO execution of requests and linearizability for all requests that change the ZooKeeper state. These design decisions enable the implementation of a high performance processing pipeline with read requests being satisfied by local servers. We show for the target workloads, 2:1 to 100:1 read to write ratio, that ZooKeeper can handle tens to hundreds of thousands of transactions per second. This performance allows ZooKeeper to be used extensively by client applications.},
  booktitle = {Proceedings of the 2010 USENIX Conference on USENIX Annual Technical Conference},
  pages = {11},
  numpages = {1},
  location = {Boston, MA},
  series = {USENIXATC'10}
}

@misc{KafkaGitHub,
  title = {Apache Kafka GitHub Repository},
  author = {{Apache Software Foundation}},
  year=2011,
  howpublished = {\url{https://github.com/apache/kafka}},
  note = {Acessado em 09 de novembro de 2023},
}

@misc{ZookeeperGitHub,
  title = {Apache ZooKeeper GitHub Repository},
  author = {{Apache Software Foundation}},
  year=2008,
  howpublished = {\url{https://github.com/apache/zookeeper}},
  note = {Acessado em 09 de novembro de 2023},
}

@misc{CloudKarafkaZAB,
  author = {Elin Vinka},
  title = {Zookeeper Atomic Broadcast Protocol (ZAB) and implementation of Zookeeper},
  year = {2018},
  url = {https://www.cloudkarafka.com/blog/cloudkarafka-zab.html},
  note = {Acessado em 10 de novembro de 2023},
}

@ARTICLE{TwentyYearsLaterEricBrewer2012,
  author={Brewer, Eric},
  journal={Computer}, 
  title={CAP twelve years later: How the "rules" have changed}, 
  year={2012},
  volume={45},
  number={2},
  pages={23-29},
  abstract={The CAP theorem asserts that any networked shared-data system can have only two of three desirable properties. However, by explicitly handling partitions, designers can optimize consistency and availability, thereby achieving some trade-off of all three. The featured Web extra is a podcast from Software Engineering Radio, in which the host interviews Dwight Merriman about the emerging NoSQL movement, the three types of nonrelational data stores, Brewer's CAP theorem, and much more.},
  keywords={},
  doi={10.1109/MC.2012.37},
  ISSN={1558-0814},
  month={Feb}
}

@ARTICLE{Whitmore2023,
  author={Whitmore, Jim},
  journal={Computer}, 
  title={Information-Driven Security Analysis: Tools and Techniques for the Study and Practice of Security Engineering}, 
  year={2023},
  volume={56},
  number={6},
  pages={107-120},
  doi={10.1109/MC.2023.3263575}
}

@misc{C_CppProgrammingLanguage,
  title = {C/C++ Programming Languages},
  author={Dennis Ritchie and Bjarne Stroustrup},
  url = {https://en.cppreference.com/},
  year={1972/1983},
  note = {Acessado em 19 de janeiro de 2024},
}

@misc{JavaProgrammingLanguage,
  title = {Java Programming Language},
  author={James Gosling},
  url = {https://www.java.com/en/},
  year={1996},
  note = {Acessado em 17 de novembro de 2023},
}

@misc{PythonProgrammingLanguage,
  title = {Python Programming Language},
  author={Guido van Rossum},
  year={1991},
  url = {https://www.python.org/},
  note = {Acessado em 17 de novembro de 2023},
}

@misc{Github,
  title = {GitHub},
  url = {https://github.com/},
  note = {Acessado em 17 de novembro de 2023},
}

@article{CS2023:ACM,
  author = {Raj, Rajendra K. and Kumar, Amruth N.},
  title = {Toward Computer Science Curricular Guidelines 2023 (CS2023)},
  year = {2022},
  issue_date = {December 2022},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {13},
  number = {4},
  issn = {2153-2184},
  url = {https://doi.org/10.1145/3571092},
  doi = {10.1145/3571092},
  journal = {ACM Inroads},
  month = {nov},
  pages = {22–25},
  numpages = {4}
}

@misc{cve-details,
  title = {CVE Details},
  author = {David E. Mann and Steven M},
  year = {2023},
  url = {https://www.cvedetails.com/},
  note = {Acessado em 17 de novembro de 2023},
}

@misc{conventionalcommits,
  title = {Conventional Commits},
  author = {{Conventional Commits}},
  year = {2023},
  url = {https://www.conventionalcommits.org/en/v1.0.0/},
  note = {Acessado em 31 de outubro de 2023},
}

@misc{KafkaPoweredBy,
  title={Powered by},
  year = {2023},
  url={https://kafka.apache.org/powered-by},
  journal={Apache Kafka},
  author={Kafka, Apache},
  note = {Acessado em 3 de dezembro de 2023},
} 

@misc{PyDriller:CodeMetrics:2023,
  author = {Breno Farias da Silva},
  title = {Code Metrics Generator: Python Script for generating the code metrics using CK metrics and PyDriller},
  year = {2023},
  howpublished = {\url{https://github.com/BrenoFariasdaSilva/Scientific-Research/blob/main/PyDriller/code_metrics.py}},
  note = {Acessado em 4 de dezembro de 2023}
}

@misc{PyDriller:MetricsChanges:2023,
  author = {Breno Farias da Silva},
  title = {Metrics Changes: Python Script for generating the metrics changes using PyDriller},
  year = {2023},
  howpublished = {\url{https://github.com/BrenoFariasdaSilva/Scientific-Research/blob/main/PyDriller/metrics_changes.py}},
  note = {Acessado em 4 de dezembro de 2023}
}

@misc{PyDriller:TrackFiles:2023,
  author = {Breno Farias da Silva},
  title = {Track Files: Python script for tracking files changes},
  year = {2023},
  howpublished = {\url{https://github.com/BrenoFariasdaSilva/Scientific-Research/blob/main/PyDriller/Scripts/track_files.py}},
  note = {Acessado em 4 de dezembro de 2023}
}

@misc{RefactoringMiner:RepositoryRefactors:2023,
  author = {Breno Farias da Silva},
  title = {Repository Refactors Tracker: Python script for tracking the metrics evolution of refactorings using Refactoring Miner},
  year = {2023},
  howpublished = {\url{https://github.com/BrenoFariasdaSilva/Scientific-Research/blob/main/RefactoringMiner/repository_refactors.py}},
  note = {Acessado em 4 de dezembro de 2023}
}

@misc{RefactoringMiner:MetricsEvolution:2023,
  author = {Breno Farias da Silva},
  title = {Metrics Evolution Refactors: Python script for tracking the metrics evolution refactorings using Refactoring Miner},
  year = {2023},
  howpublished = {\url{https://github.com/BrenoFariasdaSilva/Scientific-Research/blob/main/RefactoringMiner/metrics_evolution_refactors.py}},
  note = {Acessado em 4 de dezembro de 2023}
}

@ARTICLE{KevinJesse:2023,
  author={Jesse, Kevin and Kuhmuench, Christoph and Sawant, Anand},
  journal={IEEE Transactions on Software Engineering}, 
  title={RefactorScore: Evaluating Refactor Prone Code}, 
  year={2023},
  volume={49},
  number={11},
  pages={5008-5026},
  keywords={Codes;Java;Measurement;Unified modeling language;Predictive models;C++ languages;Computational modeling;Refactor;automatic evaluation;machine learning;software repositories},
  doi={10.1109/TSE.2023.3324613}
}

@article{KasiaMuldner:2023,
  author = {Muldner, Kasia and Jennings, Jay and Chiarelli, Veronica},
  title = {A Review of Worked Examples in Programming Activities},
  year = {2022},
  issue_date = {March 2023},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {23},
  number = {1},
  url = {https://doi.org/10.1145/3560266},
  doi = {10.1145/3560266},
  abstract = {This article reviews literature on worked examples in the context of programming activities. We focus on two types of examples, namely, code-tracing and code-generation, because there is sufficient research on these to warrant a review. We synthesize key results according to themes that emerged from the review. This synthesis aims to provide practical guidance for educators and shed light on future research opportunities. While there is established work in some areas (e.g., dynamic code-tracing examples in the form of program visualization tools, utility of subgoals in code-generation examples, and incomplete examples in the form of Parsons puzzles), there are also gaps. Thus, the article concludes with directions for future work on examples in computer science education.},
  journal = {ACM Trans. Comput. Educ.},
  month = {dec},
  articleno = {13},
  numpages = {35},
  keywords = {code-generation examples, code-tracing examples, review, Worked examples}
}
